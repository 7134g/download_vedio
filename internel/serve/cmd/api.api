syntax = "v1"

import "query.api"

info(
	title: "type title here"
	desc: "type desc here"
	author: "type author here"
	email: "type email here"
	version: "type version here"
)

@server(
	prefix: /task
	group: task
	middleware: AuthInterceptor
)
service task_serve {
	@handler Create
	post /create (TaskCreateRequest) returns (TaskCreateResponse)

	@handler List
	post /list (TaskListRequest) returns (TaskListResponse)

	@handler Update
	post /update (TaskUpdateRequest) returns (TaskUpdateResponse)

	@handler Delete
	post /delete (TaskDeleteRequest) returns (TaskDeleteResponse)

	@handler Run
	get /run (TaskRunRequest) returns (TaskRunResponse)

	@handler Status
	get /status (TaskStatusRequest) returns (TaskStatusResponse)

	@handler GetConfig
	get /config (GetConfigRequest) returns (GetConfigResponse)

	@handler SetConfig
	post /config/set (SetConfigRequest) returns (SetConfigResponse)

	@handler ShowLog
	get /log (ShowLogRequest) returns (ShowLogResponse)
}

//type Task {
//	ID        uint   `json:"id"`
//	Name      string `json:"name"`       // 任务名字
//	VideoType string `json:"video_type"` // 视频类型
//	Type      string `json:"type"`       // 任务类型
//	Data      string `json:"data"`       // url 或者 curl
//	Status    uint   `json:"status"`     // 执行状态
//}

type (
	TaskCreateRequest {
		Name      string `json:"name"`                          // 任务名字
		VideoType string `json:"video_type,options=[mp4,m3u8]"` // 视频类型
		Type      string `json:"type,options=[url,curl,all]"`   // 任务类型
		Data      string `json:"data"`                          // url 或者 curl
	}
	TaskCreateResponse {
	}
)

type (
	TaskInfo {
		ID        uint   `json:"id"`
		Name      string `json:"name"`       // 任务名字
		VideoType string `json:"video_type"` // 视频类型
		Type      string `json:"type"`       // 任务类型
		Data      string `json:"data"`       // url 或者 curl
		Status    uint   `json:"status"`     // 执行状态
		Score     uint   `json:"score"`      // 现在进度
	}

	TaskListRequest {
		DbQueryList
	}
	TaskListResponse {
		Total int64      `json:"total"`
		List  []TaskInfo `json:"list"`
	}
)

type (
	TaskUpdateRequest {
		ID        uint   `json:"id"`
		Name      string `json:"name,optional"`       // 任务名字
		VideoType string `json:"video_type,optional"` // 视频类型
		Type      string `json:"type,optional"`       // 任务类型
		Data      string `json:"data,optional"`       // url 或者 curl
	}
	TaskUpdateResponse {
	}
)

type (
	TaskDeleteRequest {
		ID uint `json:"id"`
	}
	TaskDeleteResponse {
	}
)

type (
	TaskRunRequest {
		Stop bool `form:"stop,optional"`
	}
	TaskRunResponse {
		Message string `json:"message"`
	}
)

type (
	TaskStatusRequest {
	}
	TaskStatusResponse {
		Status   bool   `json:"status"`    // 执行状态
		WebProxy string `json:"web_proxy"` // 填写到浏览器代理的地址
	}
)

type (
	GetConfigRequest {
	}
	GetConfigResponse {
		WebProxy string `json:"web_proxy"` // web监听

		Concurrency       uint   `json:"concurrency"`          // 并发数
		ConcurrencyM3u8   uint   `json:"concurrency_m_3_u_8"`  // m3u8 片段并发大小
		SaveDir           string `json:"save_dir"`             // 存储位置
		TaskErrorMaxCount uint   `json:"task_error_max_count"` // 任务连续最大错误次数
		TaskErrorDuration uint   `json:"task_error_duration"`  // 错误时候休眠多久后重试(秒)
		UseFfmpeg         bool   `json:"use_ffmpeg"`           // 使用ffmpeg进行合并分片
		FfmpegPath        string `json:"ffmpeg_path"`          // ffmpeg程序所在地址
	}
)

type (
	SetConfigRequest {
		WebProxy string `json:"web_proxy"` // web监听

		Concurrency       uint   `json:"concurrency"`          // 并发数
		ConcurrencyM3u8   uint   `json:"concurrency_m_3_u_8"`  // m3u8 片段并发大小
		SaveDir           string `json:"save_dir"`             // 存储位置
		TaskErrorMaxCount uint   `json:"task_error_max_count"` // 任务连续最大错误次数
		TaskErrorDuration uint   `json:"task_error_duration"`  // 错误时候休眠多久后重试(秒)
		UseFfmpeg         bool   `json:"use_ffmpeg"`           // 使用ffmpeg进行合并分片
		FfmpegPath        string `json:"ffmpeg_path"`          // ffmpeg程序所在地址
	}
	SetConfigResponse {
	}
)

type (
	ShowLogRequest {
	}
	ShowLogResponse {
		Text string `json:"text"`
	}
)